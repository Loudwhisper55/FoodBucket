swagger: "2.0"
info:
  version: "0.0.1"
  title: FoodBucket
  description: This is a server API for FoodBucket project
  termsOfService: http://foodbucket.com/terms/
  contact:
    name: Foodbucket API support team
    url: http://foodbucket.com/support
    email: support@foodbucket.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /api
schemes:
  # tip: remove http to make production-grade
  - http
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
# root path
  /products:
    get:
      x-swagger-router-controller: Product
      operationId: getAllProducts
      tags:
      - "product"
      produces:
      - application/json
      parameters:
        - name: isActive
          in: query
          description: returns active products
          required: false
          type: boolean
        - name: offset
          in: query
          description: start position for quering from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: number of items to query from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 50
          default: 20
      responses:
        200:
          description: Successful products response
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /product/{id}:
    get:
      x-swagger-router-controller: Product
      operationId: findProductById
      tags:
      - "product"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the product to get
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Product response
          schema:
            $ref: "#/definitions/Product"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    delete:
      x-swagger-router-controller: Product
      operationId: deleteProductById
      tags:
      - "product"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the product to delete
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: Product is deleted
    put:
      x-swagger-router-controller: Product
      operationId: updateProductById
      tags:
      - "product"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: content of the product is being updated
        required: true
        type: integer
        format: int64
      - name: updatedProduct
        in: body
        description: The updated product
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: Product is updated
        400:
          description: An error!
  /product:
    post:
      x-swagger-router-controller: Product
      operationId: createProduct
      tags:
      - "product"
      consumes:
      - application/json
      summary: Create product
      description: |
        This endpoint allows to create new product.
      parameters:
      - in: body
        name: body
        description: Product object
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        200:
          description: Existing product was found and updated
          schema:
            $ref: '#/definitions/Product'
        201:
          description: Product added
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid input
  /order:
    get:
      x-swagger-router-controller: Order
      operationId: getAllOrders
      tags:
      - "order"
      produces:
      - application/json
      parameters:
        - name: offset
          in: query
          description: start position for quering from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: number of items to query from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 50
          default: 20
      responses:
        200:
          description: Successful products response
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    post:
      x-swagger-router-controller: Order
      operationId: putOrder
      tags:
      - "order"
      consumes:
      - application/json
      summary: Put an order
      description: |
        This endpoint allows to make an order.
      parameters:
      - in: body
        name: body
        description: Order body
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: Existing order was found and updated
          schema:
            $ref: '#/definitions/Order'
        201:
          description: Order added
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid input
  /order/{id}:
    get:
      x-swagger-router-controller: Order
      operationId: findOrderById
      tags:
      - "order"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the order to get
        required: true
        type: string
      responses:
        200:
          description: Order response
          schema:
            $ref: "#/definitions/Order"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    delete:
      x-swagger-router-controller: Order
      operationId: deleteOrderById
      tags:
      - "order"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the order to delete
        required: true
        type: string
      responses:
        204:
          description: Order is deleted
    put:
      x-swagger-router-controller: Order
      operationId: updateOrderById
      tags:
      - "order"
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Order body
        required: true
        schema:
          $ref: '#/definitions/Order'
      - name: id
        in: path
        description: ID of the order to update
        required: true
        type: string
      responses:
        200:
          description: Order is updated
        400:
          description: Bad request
  /categories:
    get:
      x-swagger-router-controller: Category
      operationId: getAllCategories
      tags:
      - "category"
      produces:
      - application/json
      parameters:
        - name: isActive
          in: query
          description: returns active categories
          required: false
          type: boolean
        - name: offset
          in: query
          description: start position for quering from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: number of items to query from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 27
          default: 9
      responses:
        200:
          description: Successful categories response
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /category/{id}:
    get:
      x-swagger-router-controller: Category
      operationId: findCategoryById
      tags:
      - "category"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the category to get
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Category response
          schema:
            $ref: "#/definitions/Category"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    delete:
      x-swagger-router-controller: Category
      operationId: deleteCategoryById
      tags:
      - "category"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the category to delete
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: Category is deleted
    put:
      x-swagger-router-controller: Category
      operationId: updateCategoryById
      tags:
      - "category"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the Category being updated
        required: true
        type: integer
        format: int64
      - name: updatedCategory
        in: body
        description: The updated Category
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        200:
          description: Category is updated
        400:
          description: An error!
  /category:
    post:
      x-swagger-router-controller: Category
      operationId: createCategory
      tags:
      - "category"
      consumes:
      - application/json
      summary: Create category
      description: |
        This endpoint allows to create new category.
      parameters:
      - in: body
        name: body
        description: Category object
        required: true
        schema:
          $ref: '#/definitions/Category'
      responses:
        200:
          description: Existing category was found and updated
          schema:
            $ref: '#/definitions/Category'
        201:
          description: Category added
          schema:
            $ref: '#/definitions/Category'
        400:
          description: Invalid input
  /ingredients:
    get:
      x-swagger-router-controller: Ingredient
      operationId: getAllIngredients
      tags:
      - "ingredient"
      produces:
      - application/json
      parameters:
        - name: isActive
          in: query
          description: returns active ingredient
          required: false
          type: boolean
        - name: offset
          in: query
          description: start position for quering from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: number of items to query from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 27
          default: 9
      responses:
        200:
          description: Successful ingredient response
          schema:
            type: array
            items:
              $ref: "#/definitions/Ingredient"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /ingredient/{id}:
    get:
      x-swagger-router-controller: Ingredient
      operationId: findIngredientById
      tags:
      - "ingredient"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the ingredient to get
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Ingredient response
          schema:
            $ref: "#/definitions/Ingredient"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    delete:
      x-swagger-router-controller: Ingredient
      operationId: deleteIngredientById
      tags:
      - "ingredient"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the ingredient to delete
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: Ingredient is deleted
    put:
      x-swagger-router-controller: Ingredient
      operationId: updateIngredientById
      tags:
      - "ingredient"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the Ingredient being updated
        required: true
        type: integer
        format: int64
      - name: updated_ingredient
        in: body
        description: The updated Ingredient
        required: true
        schema:
          $ref: "#/definitions/Ingredient"
      responses:
        200:
          description: Ingredient is updated
        400:
          description: An error!
  /ingredient:
    post:
      x-swagger-router-controller: Ingredient
      operationId: createIngredient
      tags:
      - "ingredient"
      consumes:
      - application/json
      summary: Create ingredient
      description: |
        This endpoint allows to create new ingredient.
      parameters:
      - in: body
        name: body
        description: Ingredient object
        required: true
        schema:
          $ref: '#/definitions/Ingredient'
      responses:
        200:
          description: Existing ingredient was found and updated
          schema:
            $ref: '#/definitions/Ingredient'
        201:
          description: Ingredient added
          schema:
            $ref: '#/definitions/Ingredient'
        400:
          description: Invalid input
  /promotion:
    get:
      x-swagger-router-controller: Promotion
      operationId: getPromotion
      tags:
      - "promotion"
      produces:
      - application/json
      responses:
        200:
          description: List of promotions
          schema:
            $ref: "#/definitions/Promotion"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /toprated:
    get:
      x-swagger-router-controller: Toprated
      operationId: getToprated
      tags:
      - "toprated"
      produces:
      - application/json
      responses:
        200:
          description: List of toprated
          schema:
            $ref: "#/definitions/Toprated"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /contacts:
      post:
        x-swagger-router-controller: Contacts
        operationId: sendMessage
        tags:
        - "contacts"
        consumes:
        - application/json
        summary: Send message
        description: |
          This endpoint allows to send message.
        parameters:
        - in: body
          name: body
          description: Contacts/message object
          required: true
          schema:
            $ref: '#/definitions/Contacts'
        responses:
          200:
            description: Existing message was found and updated
            schema:
              $ref: '#/definitions/Contacts'
          201:
            description: Contacts/message added
            schema:
              $ref: '#/definitions/Contacts'
          400:
            description: Invalid input
  /auth/login:
      post:
        x-swagger-router-controller: Auth
        operationId: login
        tags:
        - "auth"
        consumes:
        - application/json
        summary: Login operation
        description: |
          This endpoint allows to login.
        parameters:
        - in: body
          name: body
          description: Login object
          required: true
          schema:
            $ref: '#/definitions/Login'
        responses:
          200:
            description: Existing login was found and updated
            schema:
              $ref: '#/definitions/Login'
          201:
            description: Accepted
            schema:
              $ref: '#/definitions/Login'
          400:
            description: Invalid input
  /auth/register:
      post:
        x-swagger-router-controller: Auth
        operationId: register
        tags:
        - "auth"
        consumes:
        - application/json
        summary: Register operation
        description: |
          This endpoint allows to register.
        parameters:
        - in: body
          name: body
          description: Register object
          required: true
          schema:
            $ref: '#/definitions/Register'
        responses:
          200:
            description: Existing registration was found and updated
            schema:
              $ref: '#/definitions/Register'
          201:
            description: Accepted
            schema:
              $ref: '#/definitions/Register'
          400:
            description: Invalid input
  /user/{id}/cart:
    get:
      x-swagger-router-controller: Cart
      operationId: findCartContentById
      tags:
      - "cart"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the user to get content of the cart
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Cart response
          schema:
            $ref: "#/definitions/Cart"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    post:
      x-swagger-router-controller: Cart
      operationId: createCartForUserById
      tags:
      - "cart"
      consumes:
      - application/json
      summary: Create cart for user using user's id
      description: |
        This endpoint allows to create new cart for user using user's id.
      parameters:
      - name: id
        in: path
        description: ID of the user to get content of the cart
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Cart object
        required: true
        schema:
          $ref: '#/definitions/Cart'
      responses:
        200:
          description: Existing category was found and updated
          schema:
            $ref: '#/definitions/Cart'
        201:
          description: Cart added
          schema:
            $ref: '#/definitions/Cart'
        400:
          description: Invalid input
    delete:
      x-swagger-router-controller: Cart
      operationId: deleteCartContentById
      tags:
      - "cart"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the user to delete content of the cart
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: content of the user's cart is deleted
    put:
      x-swagger-router-controller: Cart
      operationId: updateCartContentById
      tags:
      - "cart"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: content of the user's cart is being updated
        required: true
        type: integer
        format: int64
      - name: updatedcartContent
        in: body
        description: The updated cartContent
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        200:
          description: cartContent is updated
        400:
          description: An error!
  /users:
    get:
      x-swagger-router-controller: User
      operationId: getAllUsers
      summary: Get all users
      tags:
      - "user"
      produces:
      - application/json
      parameters:
        - name: isActive
          in: query
          description: returns active users
          required: false
          type: boolean
        - name: offset
          in: query
          description: start position for quering from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          default: 0
        - name: limit
          in: query
          description: number of items to query from DB
          required: true
          type: integer
          format: int32
          minimum: 0
          maximum: 27
          default: 9
      responses:
        200:
          description: Successful users response
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
  /user/{id}:
    get:
      x-swagger-router-controller: User
      operationId: findUserById
      summary: Find user
      tags:
      - "user"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the user to get
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: User response
          schema:
            $ref: "#/definitions/User"
        default:
          description: invalid input
          schema:
            $ref: "#/definitions/Error"
    delete:
      x-swagger-router-controller: User
      operationId: deleteUserById
      summary: Delete user
      tags:
      - "user"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the user to delete
        required: true
        type: integer
        format: int64
      responses:
        204:
          description: User is deleted
          schema:
            $ref: "#/definitions/User"
    put:
      x-swagger-router-controller: User
      operationId: updateUserById
      summary: Update user
      tags:
      - "user"
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the User being updated
        required: true
        type: integer
        format: int64
      - name: updatedUser
        in: body
        description: The updated User
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: User is updated
        400:
          description: An error!
  /user:
    post:
      x-swagger-router-controller: User
      operationId: createUser
      tags:
      - "user"
      consumes:
      - application/json
      summary: Create user
      description: |
        This endpoint allows to create new user.
      parameters:
      - in: body
        name: body
        description: User object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Existing category was found and updated
          schema:
            $ref: "#/definitions/User"
        201:
          description: User added
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid input
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Product:
    type: object
    required:
      - price
      - title
      - description
    properties:
      productId:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      image:
        type: string
      price:
        type: integer
        format: int64
      category:
        type: string
      status:
        type: boolean
      recommended:
        type: [string]
      discount:
        type: integer
        format: int64
      promotions:
        type: boolean
      caloricity:
        type: integer
        format: int64
      servingSize:
        type: integer
      difficulty:
        type: string
      spiceLevel:
        type: string
      ingredients:
        type: array
        items:
          $ref: "#/definitions/IngredientsList"
  IngredientsList:
    type: object
    properties:
      ingredientId:
        type: integer
        format: int64
      ingredientName:
        type: string
      quantity:
        type: integer
        format: int64
      measure:
        type: string
  Cart:
    type: object
    required:
       - orderedProducts
       - totalPriceOfAllDishes
    properties:
      orderedProducts:
        type: array
        items:
          $ref: '#/definitions/CartOrder'
      totalPriceOfAllDishes:
        type: integer
        format: int64
  CartOrder:
    type: object
    required:
      - productId
      - quantity
    properties:
      productId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int64

  Category:
    type: object
    required:
      - image
      - title
      - description
    properties:
      category_id:
        type: integer
        format: int64
      image:
        type: string
      title:
        type: string
      description:
        type: string
  User:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: integer
        format: int64
      city:
        type: string
      address:
        type: string
      image:
        type: string
      favourites:
        type: array
        items:
          type: number
      active:
        type: boolean
  Ingredient:
    type: object
    required:
      - image
      - title
    properties:
      ingredient_id:
        type: integer
        format: int64
      image:
        type: string
      title:
        type: string
      measure:
        type: string
      quantity:
        type: integer
        format: int64
      price:
        type: integer
        format: int64
  Order:
    type: object
    required:
      - username
      - city
      - address
      - products
      - price
      - status
    properties:
      orderId:
        type: integer
        format: int64
      date:
        type: string
      username:
        type: string
      city:
        type: string
      price:
        type: integer
        format: int64
      address:
        type: string
      status:
        type: string
      phone:
        type: string
      products:
        type: array
        items:
          type: integer
          format: int64
        minItems: 1
      measure:
        type: string
      quantity:
        type: integer
        format: int64
      discount:
        type: integer
        format: int64
  Promotion:
    type: object
    required:
      - image
      - title
      - description
      - products
    properties:
      promotion_id:
        type: integer
      image:
        type: string
      title:
        type: string
      description:
        type: string
      products:
        type: array
        minimum: 1
        items:
           $ref: '#/definitions/Product'
  Toprated:
    type: object
    required:
      - title
      - description
      - products
    properties:
      toprated_id:
        type: integer
      title:
        type: string
      description:
        type: string
      products:
        type: array
        minimum: 1
        items:
           $ref: '#/definitions/Product'
  Contacts:
    type: object
    required:
      - email
      - name
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      email:
        type: string
      name:
        type: string
      lastName:
        type: string
      details:
        type: string
  Login:
    type: object
    required:
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
        minimum: 1
      email:
        type: string
      password:
        type: string
      remember:
        type: boolean
  Register:
    type: object
    required:
      - email
      - password
      - firstName
      - lastName
    properties:
      userId:
        type: integer
        format: int64
        minimum: 1
      email:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      city:
        type: string
      address:
        type: string
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
